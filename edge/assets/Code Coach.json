{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "{\n \"language\": \"JavaScript\",\n \"score\": 55,\n \"suggestions\": [\n {\n \"category\": \"Make dependencies explicit\",\n \"codeSnippet\": \"let userCode = \\\"dd0cfef0-fda9-47ec-8a65-49d7bc004f82\\\";\\nlet proxyIP = \\\"turk.radicalization.ir\\\";\\nlet dnsResolver = \\\"1.1.1.1\\\";\",\n \"description\": \"The variables `userCode`, `proxyIP`, and `dnsResolver` are declared with `let` at the top level and modified within the `fetch` function. This creates mutable global state, which can lead to unexpected behavior in a serverless environment where worker instances might be reused across multiple requests, causing state leakage between invocations. Configuration should primarily rely on `env` variables and be treated as immutable or passed explicitly.\",\n \"lineNumber\": 17,\n \"severity\": \"high\"\n },\n {\n \"category\": \"Make dependencies explicit\",\n \"codeSnippet\": \"const SCAMALYTICS_API_KEY = \\\"c57eb62bbde89f00742cb3f92d7127f96132c9cea460f18c08fd5e62530c5604\\\";\",\n \"description\": \"The `SCAMALYTICS_API_KEY` is hardcoded. Sensitive credentials like API keys should always be loaded from environment variables (`env`) to prevent them from being accidentally committed to source control and to allow for easy rotation and different values across environments (e.g., development vs. production).\",\n \"lineNumber\": 24,\n \"severity\": \"high\"\n },\n {\n \"category\": \"Function size\",\n \"codeSnippet\": \"export default {\\n async fetch(request, env, ctx) {\\n try {\\n userCode = env.UUID || userCode;\\n proxyIP = env.PROXYIP || proxyIP;\\n dnsResolver = env.DNS_RESOLVER || dnsResolver;\\n \\n const actualScamalyticsUsername = env.SCAMALYTICS_USERNAME || SCAMALYTICS_USERNAME;\\n const actualScamalyticsApiKey = env.SCAMALYTICS_API_KEY || SCAMALYTICS_API_KEY;\\n\\n\\n if (!isValidUserCode(userCode)) {\\n throw new Error(\\\"Invalid user code\\\");\\n }\\n\\n const upgradeHeader = request.headers.get(\\\"Upgrade\\\");\\n const url = new URL(request.url);\\n\\n if (!upgradeHeader || upgradeHeader !== \\\"websocket\\\") {\\n\\t\\tswitch (url.pathname) {\\n\\t\\t\\tcase '/':\\n case `/${userCode}`:\\n\\t\\t\\t\\tconst hostName = request.headers.get('Host');\\n\\t\\t\\t\\treturn new Response(await getHtml(userCode, hostName), {\\n\\t\\t\\t\\t\\theaders: {\\n\\t\\t\\t\\t\\t\\t\\\"Content-Type\\\": \\\"text/html;charset=UTF-8\\\",\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\tcase '/api/ip':\\n\\t\\t\\t\\treturn new Response(JSON.stringify({ ip: request.headers.get('CF-Connecting-IP') }), {\\n headers: {\\n \\\"Content-Type\\\": \\\"application/json\\\",\\n \\\"Access-Control-Allow-Origin\\\": \\\"*\\\",\\n }\\n });\\n\\n\\t\\t\\tcase '/scamalytics-lookup':\\n\\t\\t\\t\\tconst ipToLookup = url.searchParams.get('ip');\\n\\t\\t\\t\\tif (!ipToLookup) {\\n\\t\\t\\t\\t\\treturn new Response('Missing IP parameter', { status: 400 });\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (actualScamalyticsUsername === '<YOUR_SCAMALYTICS_USERNAME>' || actualScamalyticsApiKey === '<YOUR_SCAMALYTICS_API_KEY>' || actualScamalyticsUsername === '' || actualScamalyticsApiKey === '') {\\n\\t\\t\\t\\t\\tconsole.error('Scamalytics credentials not configured in Worker (env or hardcoded).');\\n\\t\\t\\t\\t\\treturn new Response('Scamalytics API credentials not configured on server.', { status: 500 });\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tconst scamalyticsUrl = `${SCAMALYTICS_API_BASE_URL}${actualScamalyticsUsername}/?key=${actualScamalyticsApiKey}&ip=${ipToLookup}`;\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tconst scamalyticsResponse = await fetch(scamalyticsUrl);\\n\\t\\t\\t\\t\\tconst responseBody = await scamalyticsResponse.json();\\n\\t\\t\\t\\t\\tconst headers = new Headers({\\n\\t\\t\\t\\t\\t\\t'Content-Type': 'application/json',\\n\\t\\t\\t\\t\\t\\t'Access-Control-Allow-Origin': '*',\\n\\t\\t\\t\\t\\t\\t'Access-Control-Allow-Methods': 'GET, OPTIONS',\\n\\t\\t\\t\\t\\t\\t'Access-Control-Allow-Headers': 'Content-Type',\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\treturn new Response(JSON.stringify(responseBody), {\\n\\t\\t\\t\\t\\t\\tstatus: scamalyticsResponse.status,\\n\\t\\t\\t\\t\\t\\theaders: headers,\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t} catch (apiError) {\\n\\t\\t\\t\\t\\tconsole.error('Error fetching from Scamalytics API:', apiError);\\n\\t\\t\\t\\t\\treturn new Response(JSON.stringify({ error: 'Failed to fetch from Scamalytics API', details: apiError.message }), {\\n\\t\\t\\t\\t\\t\\tstatus: 502,\\n\\t\\t\\t\\t\\t\\theaders: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tif (url.pathname.startsWith('/api/geoip/')) {\\n\\t\\t\\t\\t\\tconst ip = url.pathname.split('/')[3];\\n\\t\\t\\t\\t\\tif (!ip) {\\n\\t\\t\\t\\t\\t\\treturn new Response('Missing IP parameter in path', { status: 400 });\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tconst geoData = await fetchGeoIpWithFallback(ip);\\n\\t\\t\\t\\t\\tif (geoData) {\\n\\t\\t\\t\\t\\t\\treturn new Response(JSON.stringify(geoData), {\\n\\t\\t\\t\\t\\t\\t\\theaders: {\\n\\t\\t\\t\\t\\t\\t\\t\\t'Content-Type': 'application/json',\\n\\t\\t\\t\\t\\t\\t\\t\\t'Access-Control-Allow-Origin': '*',\\n\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\treturn new Response(JSON.stringify({ error: 'Failed to fetch GeoIP data from all sources' }), {\\n\\t\\t\\t\\t\\t\\t\\tstatus: 502,\\n\\t\\t\\t\\t\\t\\t\\theaders: {\\n\\t\\t\\t\\t\\t\\t\\t\\t'Content-Type': 'application/json',\\n\\t\\t\\t\\t\\t\\t\\t\\t'Access-Control-Allow-Origin': '*',\\n\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn new Response('Not found', { status: 404 });\\n\\t\\t}\\n } else {\\n return await streamOverWSHandler(request);\\n }\\n } catch (err) {\\n console.error(\\\"Fetch error:\\\", err);\\n return new Response(err.toString(), { status: 500 });\\n }\\n }\",\n \"description\": \"The `fetch` function is very large (over 80 lines of code) and handles multiple distinct responsibilities (serving HTML, API endpoints, WebSocket proxying) within a single `switch` statement. This leads to deep nesting (up to 4-5 levels in some branches) and makes the function hard to read, understand, and maintain. Consider extracting route handlers into separate, more focused functions.\",\n \"lineNumber\": 80,\n \"severity\": \"high\"\n },\n {\n \"category\": \"Descriptive names\",\n \"codeSnippet\": \"const ENCODED = {\\n NETWORK: \\\"c3c=\\\", // ws reversed + base64\\n TYPE: \\\"YW5haWQ=\\\", // diana\\n STREAM: \\\"bWFlcnRz\\\", // stream\\n PROTOCOL: \\\"c3NlbHY=\\\", // vless\\n};\",\n \"description\": \"The `ENCODED` object stores values that are Base64 encoded and then reversed. While comments explain their original values, this adds an unnecessary layer of obfuscation and requires `decodeSecure` for every use, which can make the code slightly less readable and less performant for static strings. If the goal is not genuine security through obfuscation, storing them as plain strings is simpler and clearer.\",\n \"lineNumber\": 10,\n \"severity\": \"low\"\n },\n {\n \"category\": \"Error handling\",\n \"codeSnippet\": \"if (!base64Str) {\\n return { error: null };\\n}\",\n \"description\": \"The `base64ToArrayBuffer` function returns an object `{ error: null }` for an empty `base64Str`. While functional, it's slightly inconsistent with how errors are handled in the `catch` block (returning `{ error }`). For consistency or clearer intent, consider returning a specific error object (`{ error: new Error(\\\"Empty base64 string provided\\\") }`) or throwing an error in this case as well, to align with typical JavaScript error patterns for invalid input.\",\n \"lineNumber\": 35,\n \"severity\": \"low\"\n },\n {\n \"category\": \"Function size\",\n \"codeSnippet\": \"return (\\n byteToHex[arr[offset + 0]] +\\n byteToHex[arr[offset + 1]] +\\n byteToHex[arr[offset + 2]] +\\n byteToHex[arr[offset + 3]] +\\n \\\"-\\\" +\\n byteToHex[arr[offset + 4]] +\\n byteToHex[arr[offset + 5]] +\\n \\\"-\\\" +\\n byteToHex[arr[offset + 6]] +\\n byteToHex[arr[offset + 7]] +\\n \\\"-\\\" +\\n byteToHex[arr[offset + 8]] +\\n byteToHex[arr[offset + 9]] +\\n \\\"-\\\" +\\n byteToHex[arr[offset + 10]] +\\n byteToHex[arr[offset + 11]] +\\n byteToHex[arr[offset + 12]] +\\n byteToHex[arr[offset + 13]] +\\n byteToHex[arr[offset + 14]] +\\n byteToHex[arr[offset + 15]]\\n ).toLowerCase();\",\n \"description\": \"The `unsafeStringify` function constructs a UUID string through a very long, single return statement concatenation. While technically correct for a fixed-length string, this makes the code hard to read and mentally parse. Breaking it into multiple lines or using a more programmatic approach (e.g., an array `map` and `join` with slices) could significantly improve readability.\",\n \"lineNumber\": 61,\n \"severity\": \"medium\"\n },\n {\n \"category\": \"Error handling\",\n \"codeSnippet\": \"if (actualScamalyticsUsername === '<YOUR_SCAMALYTICS_USERNAME>' || actualScamalyticsApiKey === '<YOUR_SCAMALYTICS_API_KEY>' || actualScamalyticsUsername === '' || actualScamalyticsApiKey === '') {\",\n \"description\": \"The condition for checking Scamalytics credentials includes checks for empty strings (`''`) in addition to the placeholder values (`'<YOUR_SCAMALYTICS_USERNAME>'`). If the placeholder values are the only defaults, the empty string checks might be redundant. If an empty string from `env` is a distinct valid error case, it's fine, but clarify the intent or simplify if possible.\",\n \"lineNumber\": 114,\n \"severity\": \"low\"\n },\n {\n \"category\": \"Avoid magic numbers\",\n \"codeSnippet\": \"portRemote = 443,\",\n \"description\": \"The default port `443` is a magic number in `streamOverWSHandler`. While common for HTTPS/TLS, giving it a named constant like `DEFAULT_VLESS_PORT` would improve clarity and maintainability, especially if this value were to change or be used in other contexts.\",\n \"lineNumber\": 202,\n \"severity\": \"low\"\n },\n {\n \"category\": \"Make dependencies explicit\",\n \"codeSnippet\": \"let isValidUser = stringify(new Uint8Array(chunk.slice(1, 17))) === userCode;\",\n \"description\": \"The `processStreamHeader` function directly accesses the global `userCode` variable. This creates a hidden dependency on global state. For better modularity, testability, and to prevent state bleeding in a serverless environment, `userCode` should be passed as an explicit argument to this function.\",\n \"lineNumber\": 252,\n \"severity\": \"medium\"\n },\n {\n \"category\": \"Avoid magic numbers\",\n \"codeSnippet\": \"if (chunk.byteLength < 24) return { hasError: true, message: \\\"invalid data\\\" };\\n const version = new Uint8Array(chunk.slice(0, 1));\\n let isValidUser = stringify(new Uint8Array(chunk.slice(1, 17))) === userCode;\\n\\n const optLength = new Uint8Array(chunk.slice(17, 18))[0];\\n const command = new Uint8Array(chunk.slice(18 + optLength, 18 + optLength + 1))[0];\\n let isUDP = false;\\n if (command === 1) {} // TCP\\n else if (command === 2) isUDP = true;\\n\\n const portIndex = 18 + optLength + 1;\\n let addressIndex = portIndex + 2;\\n const addressType = new Uint8Array(chunk.slice(addressIndex, addressIndex + 1))[0];\\n let addressLength = 0;\\n let addressValueIndex = addressIndex + 1;\\n\\n switch (addressType) {\\n case 1: // IPv4\\n addressLength = 4;\\n addressValue = new Uint8Array(chunk.slice(addressValueIndex, addressValueIndex + addressLength)).join(\\\".\\\");\\n break;\\n case 2: // Domain\\n addressLength = new Uint8Array(chunk.slice(addressValueIndex, addressValueIndex + 1))[0];\\n addressValueIndex += 1;\\n addressValue = new TextDecoder().decode(chunk.slice(addressValueIndex, addressValueIndex + addressLength));\\n break;\\n case 3: // IPv6\\n addressLength = 16;\\n const dataView = new DataView(chunk.slice(addressValueIndex, addressValueIndex + addressLength));\\n const ipv6 = [];\\n for (let i = 0; i < 8; i++) ipv6.push(dataView.getUint16(i * 2).toString(16));\\n addressValue = ipv6.join(\\\":\\\");\\n break;\\n default: return { hasError: true, message: `invalid addressType: ${addressType}` };\\n }\",\n \"description\": \"The `processStreamHeader` function uses many hardcoded numerical values (e.g., `24`, `1`, `17`, `18`, `1`, `2`, `3`, `4`, `16`) for byte offsets, lengths, and command/address types when parsing the VLESS stream header. These \\\"magic numbers\\\" are integral to the binary protocol. Defining them as named constants (e.g., `VLESS_MIN_LENGTH`, `VLESS_UUID_OFFSET`, `VLESS_OPTION_LENGTH_OFFSET`, `COMMAND_TCP`, `ADDRESS_TYPE_IPV4`) would significantly improve readability and make the code easier to understand for anyone not intimately familiar with the VLESS protocol specification.\",\n \"lineNumber\": 251,\n \"severity\": \"medium\"\n },\n {\n \"category\": \"Make dependencies explicit\",\n \"codeSnippet\": \"const tcpSocket = await connectAndWrite(proxyIP || addressRemote, portRemote);\",\n \"description\": \"The `handleTCPOutBound` function implicitly uses the global `proxyIP` variable for connection retries (`proxyIP || addressRemote`). This creates a hidden dependency on global state. For better modularity and testability, `proxyIP` should be passed as an explicit argument to this function.\",\n \"lineNumber\": 310,\n \"severity\": \"medium\"\n },\n {\n \"category\": \"Make dependencies explicit\",\n \"codeSnippet\": \"const resp = await fetch(`https://${dnsResolver}/dns-query`, {\\n method: \\\"POST\\\",\\n headers: { \\\"content-type\\\": \\\"application/dns-message\\\" },\\n body: chunk,\\n });\",\n \"description\": \"The `handleUDPOutBound` function implicitly uses the global `dnsResolver` variable for DNS-over-HTTPS queries. This creates a hidden dependency on global state. `dnsResolver` should be passed as an explicit argument to this function.\",\n \"lineNumber\": 358,\n \"severity\": \"medium\"\n },\n {\n \"category\": \"Avoid magic numbers\",\n \"codeSnippet\": \"const baseUrl = `${protocol}://${currentUuid}@${hostName}:443`;\\n const commonParams = `encryption=none&host=${hostName}&type=${networkType}&security=tls&sni=${hostName}`;\\n const freedomConfig = `${baseUrl}?path=/api/v3&eh=Sec-WebSocket-Protocol&ed=2560&${commonParams}&fp=chrome&alpn=h3#${hostName}`;\\n const dreamConfig = `${baseUrl}?path=%2FIndex%3Fed%3D2560&${commonParams}&fp=randomized&alpn=h2,http/1.1#${hostName}`;\",\n \"description\": \"The `getHtml` function uses hardcoded numerical values `443` (port) and `2560` (early data length) within the generated VLESS configuration URLs. While these are part of the VLESS protocol specification, defining them as named constants (e.g., `VLESS_DEFAULT_PORT`, `VLESS_EARLY_DATA_LENGTH`) would improve clarity and maintainability.\",\n \"lineNumber\": 407,\n \"severity\": \"low\"\n },\n {\n \"category\": \"Function size\",\n \"codeSnippet\": \"const HTML_TEMPLATE = `\\n<!doctype html>\\n<html lang=\\\"en\\\">\\n<head>\\n <meta charset=\\\"UTF-8\\\" />\\n <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n <title>VLESS Proxy Configuration</title>\\n <link rel=\\\"preconnect\\\" href=\\\"https://fonts.googleapis.com\\\">\\n <link rel=\\\"preconnect\\\" href=\\\"https://fonts.gstatic.com\\\" crossorigin>\\n <link\\n href=\\\"https://fonts.googleapis.com/css2?family=Ibarra+Real+Nova:ital,wght@0,400..700;1,400..700&family=Fira+Code:wght@300..700&family=Inter:opsz,wght@14..32,100..900&family=Roboto+Mono:wght@100..700&display=swap\\\"\\n rel=\\\"stylesheet\\\">\\n <style>\\n * {\\n margin: 0;\\n padding: 0;\\n box-sizing: border-box;\\n }\\n\\n @font-face {\\n font-family: \\\"Aldine 401 BT Web\\\";\\n src: url(\\\"https://pub-7a3b428c76aa411181a0f4dd7fa9064b.r2.dev/Aldine401_Mersedeh.woff2\\\") format(\\\"woff2\\\");\\n font-weight: 400; font-style: normal; font-display: swap;\\n }\\n\\n @font-face {\\n font-family: \\\"Styrene B LC\\\";\\n src: url(\\\"https://pub-7a3b428c76aa411181a0f4dd7fa9064b.r2.dev/StyreneBLC-Regular.woff2\\\") format(\\\"woff2\\\");\\n font-weight: 400; font-style: normal; font-display: swap;\\n }\\n\\n @font-face {\\n font-family: \\\"Styrene B LC\\\";\\n src: url(\\\"https://pub-7a3b428c76aa411181a0f4dd7fa9064b.r2.dev/StyreneBLC-Medium.woff2\\\") format(\\\"woff2\\\");\\n font-weight: 500; font-style: normal; font-display: swap;\\n }\\n\\n :root {\\n --background-primary: #2a2421;\\n --background-secondary: #35302c;\\n --background-tertiary: #413b35;\\n --border-color: #5a4f45;\\n --border-color-hover: #766a5f;\\n --text-primary: #e5dfd6;\\n --text-secondary: #b3a89d;\\n --text-accent: #ffffff;\\n --accent-primary: #be9b7b;\\n --accent-secondary: #d4b595;\\n --accent-tertiary: #8d6e5c;\\n --accent-primary-darker: #8a6f56;\\n --button-text-primary: #2a2421;\\n --button-text-secondary: var(--text-primary);\\n --shadow-color: rgba(0, 0, 0, 0.35);\\n --shadow-color-accent: rgba(190, 155, 123, 0.4);\\n --border-radius: 8px;\\n --transition-speed: 0.2s;\\n --transition-speed-fast: 0.1s;\\n --transition-speed-medium: 0.3s;\\n --transition-speed-long: 0.6s;\\n --status-success: #70b570;\\n --status-error: #e05d44;\\n --status-warning: #e0bc44;\\n --status-info: #4f90c4;\\n\\n --serif: \\\"Aldine 401 BT Web\\\", \\\"Times New Roman\\\", Times, Georgia, ui-serif, serif;\\n --sans-serif: \\\"Styrene B LC\\\", \\\"Inter\\\", -apple-system, BlinkMacSystemFont, \\\"Helvetica Neue\\\", Arial, \\\"Noto Color Emoji\\\", sans-serif;\\n --mono-serif: \\\"Fira Code\\\", \\\"Roboto Mono\\\", Cantarell, Courier Prime, SFMono-Regular, monospace;\\n }\\n\\n body {\\n font-family: var(--sans-serif);\\n font-size: 16px;\\n font-weight: 400;\\n font-style: normal;\\n background-color: var(--background-primary);\\n color: var(--text-primary);\\n padding: 3rem;\\n line-height: 1.5;\\n -webkit-font-smoothing: antialiased;\\n -moz-osx-font-smoothing: grayscale;\\n }\\n\\n .container {\\n max-width: 768;\\n margin: 20px auto;\\n padding: 0 12px;\\n border-radius: var(--border-radius);\\n box-shadow:\\n 0 6px 15px rgba(0, 0, 0, 0.2),\\n 0 0 25px 8px var(--shadow-color-accent);\\n transition: box-shadow var(--transition-speed-medium) ease;\\n }\\n\\n .container:hover {\\n box-shadow:\\n 0 8px 20px rgba(0, 0, 0, 0.25),\\n 0 0 35px 10px var(--shadow-color-accent);\\n }\\n\\n .header {\\n text-align: center;\\n margin-bottom: 40px;\\n padding-top: 30px;\\n }\\n\\n .header h1 {\\n font-family: var(--serif);\\n font-weight: 400;\\n font-size: 2rem;\\n color: var(--text-accent);\\n margin-top: 0px;\\n margin-bottom: 2px;\\n }\\n\\n .header p {\\n color: var(--text-secondary);\\n font-size: 12px;\\n font-weight: 400;\\n }\\n\\n .config-card {\\n background: var(--background-secondary);\\n border-radius: var(--border-radius);\\n padding: 20px;\\n margin-bottom: 24px;\\n border: 1px solid var(--border-color);\\n transition:\\n border-color var(--transition-speed) ease,\\n box-shadow var(--transition-speed) ease;\\n }\\n\\n .config-card:hover {\\n border-color: var(--border-color-hover);\\n box-shadow: 0 4px 8px var(--shadow-color);\\n }\\n\\n .config-title {\\n font-family: var(--serif);\\n font-size: 22px;\\n font-weight: 400;\\n color: var(--accent-secondary);\\n margin-bottom: 16px;\\n padding-bottom: 12px;\\n border-bottom: 1px solid var(--border-color);\\n display: flex;\\n align-items: center;\\n justify-content: space-between;\\n }\\n\\n .config-title .refresh-btn {\\n position: relative;\\n overflow: hidden;\\n display: flex;\\n align-items: center;\\n gap: 4px;\\n font-family: var(--serif);\\n font-size: 12px;\\n padding: 6px 12px;\\n border-radius: 6px;\\n color: var(--accent-secondary);\\n background-color: var(--background-tertiary);\\n border: 1px solid var(--border-color);\\n cursor: pointer;\\n\\n transition:\\n background-color var(--transition-speed) ease,\\n border-color var(--transition-speed) ease,\\n color var(--transition-speed) ease,\\n transform var(--transition-speed) ease,\\n box-shadow var(--transition-speed) ease;\\n }\\n\\n .config-title .refresh-btn::before {\\n content: \\\"\\\";\\n position: absolute;\\n top: 0;\\n left: 0;\\n width: 100%;\\n height: 100%;\\n background: linear-gradient(120deg, transparent, rgba(255, 255, 255, 0.2), transparent);\\n transform: translateX(-100%);\\n transition: transform var(--transition-speed-long) ease;\\n z-index: -1;\\n }\\n\\n .config-title .refresh-btn:hover {\\n letter-spacing: 0.5px;\\n font-weight: 600;\\n background-color: #4d453e;\\n color: var(--accent-primary);\\n border-color: var(--border-color-hover);\\n transform: translateY(-2px);\\n box-shadow: 0 4px 8px var(--shadow-color);\\n }\\n\\n .config-title .refresh-btn:hover::before {\\n transform: translateX(100%);\\n }\\n\\n .config-title .refresh-btn:active {\\n transform: translateY(0px) scale(0.98);\\n box-shadow: none;\\n }\\n\\n .refresh-icon {\\n width: 12px;\\n height: 12px;\\n stroke: currentColor;\\n }\\n\\n .config-content {\\n position: relative;\\n background: var(--background-tertiary);\\n border-radius: var(--border-radius);\\n padding: 16px;\\n margin-bottom: 20px;\\n border: 1px solid var(--border-color);\\n }\\n\\n .config-content pre {\\n overflow-x: auto;\\n font-family: var(--mono-serif);\\n font-size: 12px;\\n color: var(--text-primary);\\n margin: 0;\\n white-space: pre-wrap;\\n word-break: break-all;\\n }\\n\\n .button {\\n display: inline-flex;\\n align-items: center;\\n justify-content: center;\\n gap: 8px;\\n padding: 8px 16px;\\n border-radius: var(--border-radius);\\n font-size: 13px;\\n font-weight: 500;\\n cursor: pointer;\\n border: 1px solid var(--border-color);\\n background-color: var(--background-tertiary);\\n color: var(--button-text-secondary);\\n transition:\\n background-color var(--transition-speed) ease,\\n border-color var(--transition-speed) ease,\\n color var(--transition-speed) ease,\\n transform var(--transition-speed) ease,\\n box-shadow var(--transition-speed) ease;\\n -webkit-tap-highlight-color: transparent;\\n touch-action: manipulation;\\n text-decoration: none;\\n overflow: hidden;\\n z-index: 1;\\n }\\n\\n .button:focus-visible {\\n outline: 2px solid var(--accent-primary);\\n outline-offset: 2px;\\n }\\n\\n .button:disabled {\\n opacity: 0.6;\\n cursor: not-allowed;\\n transform: none;\\n box-shadow: none;\\n transition: opacity var(--transition-speed) ease;\\n }\\n\\n .button:not(.copy-buttons):not(.client-btn):hover {\\n background-color: #4d453e;\\n border-color: var(--border-color-hover);\\n transform: translateY(-1px);\\n box-shadow: 0 2px 4px var(--shadow-color);\\n }\\n\\n .button:not(.copy-buttons):not(.client-btn):active {\\n transform: translateY(0px) scale(0.98);\\n box-shadow: none;\\n }\\n\\n .copy-buttons {\\n position: relative;\\n display: flex;\\n gap: 4px;\\n overflow: hidden;\\n align-self: center;\\n font-family: var(--serif);\\n font-size: 12px;\\n padding: 6px 12px;\\n border-radius: 6px;\\n color: var(--accent-secondary);\\n border: 1px solid var(--border-color);\\n transition:\\n background-color var(--transition-speed) ease,\\n border-color var(--transition-speed) ease,\\n color var(--transition-speed) ease,\\n transform var(--transition-speed) ease,\\n box-shadow var(--transition-speed) ease;\\n }\\n\\n .copy-buttons::before,\\n .client-btn::before {\\n content: \\\"\\\";\\n position: absolute;\\n top: 0;\\n left: 0;\\n width: 100%;\\n height: 100%;\\n background: linear-gradient(120deg, transparent, rgba(255, 255, 255, 0.2), transparent);\\n transform: translateX(-100%);\\n transition: transform var(--transition-speed-long) ease;\\n z-index: -1;\\n }\\n\\n .copy-buttons:hover::before,\\n .client-btn:hover::before {\\n transform: translateX(100%);\\n }\\n\\n .copy-buttons:hover {\\n background-color: #4d453e;\\n letter-spacing: 0.5px;\\n font-weight: 600;\\n border-color: var(--border-color-hover);\\n transform: translateY(-2px);\\n box-shadow: 0 4px 8px var(--shadow-color);\\n }\\n\\n .copy-buttons:active {\\n transform: translateY(0px) scale(0.98);\\n box-shadow: none;\\n }\\n\\n .copy-icon {\\n width: 12px;\\n height: 12px;\\n stroke: currentColor;\\n }\\n\\n .client-buttons {\\n display: grid;\\n grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\\n gap: 12px;\\n margin-top: 16px;\\n }\\n\\n .client-btn {\\n width: 100%;\\n background-color: var(--accent-primary);\\n color: var(--background-tertiary);\\n border-radius: 6px;\\n border-color: var(--accent-primary-darker);\\n position: relative;\\n overflow: hidden;\\n transition: all 0.3s cubic-bezier(0.2, 0.8, 0.2, 1);\\n box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);\\n }\\n\\n .client-btn::before {\\n left: -100%;\\n transition: transform 0.6s ease;\\n z-index: 1;\\n }\\n\\n .client-btn::after {\\n content: \\\"\\\";\\n position: absolute;\\n bottom: -5px;\\n left: 0;\\n width: 100%;\\n height: 5px;\\n background: linear-gradient(90deg, var(--accent-tertiary), var(--accent-secondary));\\n opacity: 0;\\n transition: all 0.3s ease;\\n z-index: 0;\\n }\\n\\n .client-btn:hover {\\n text-transform: uppercase;\\n letter-spacing: 0.3px;\\n transform: translateY(-3px);\\n background-color: var(--accent-secondary);\\n color: var(--button-text-primary);\\n box-shadow: 0 5px 15px rgba(190, 155, 123, 0.5);\\n border-color: var(--accent-secondary);\\n }\\n\\n .client-btn:hover::before {\\n transform: translateX(100%);\\n }\\n\\n .client-btn:hover::after {\\n opacity: 1;\\n bottom: 0;\\n }\\n\\n .client-btn:active {\\n transform: translateY(0) scale(0.98);\\n box-shadow: 0 2px 3px rgba(0, 0, 0, 0.2);\\n background-color: var(--accent-primary-darker);\\n }\\n\\n .client-btn .client-icon {\\n position: relative;\\n z-index: 2;\\n transition: transform 0.3s ease;\\n }\\n\\n .client-btn:hover .client-icon {\\n transform: rotate(15deg) scale(1.1);\\n }\\n\\n .client-btn .button-text {\\n position: relative;\\n z-index: 2;\\n transition: letter-spacing 0.3s ease;\\n }\\n\\n .client-btn:hover .button-text { letter-spacing: 0.5px; }\\n .client-icon { width: 18px; height: 18px; border-radius: 6px; background-color: var(--background-secondary); display: flex; align-items: center; justify-content: center; flex-shrink: 0; }\\n .client-icon svg { width: 14px; height: 14px; fill: var(--accent-secondary); }\\n\\n .button.copied { background-color: var(--accent-secondary) !important; color: var(--background-tertiary) !important; }\\n .button.error { background-color: #c74a3b !important; color: var(--text-accent) !important; }\\n\\n .footer { text-align: center; margin-top: 20px; padding-bottom: 40px; color: var(--text-secondary); font-size: 12px; }\\n .footer p { margin-bottom: 0px; }\\n\\n ::-webkit-scrollbar { width: 8px; height: 8px; }\\n ::-webkit-scrollbar-track { background: var(--background-primary); border-radius: 4px; }\\n ::-webkit-scrollbar-thumb { background: var(--border-color); border-radius: 4px; border: 2px solid var(--background-primary); }\\n ::-webkit-scrollbar-thumb:hover { background: var(--border-color-hover); }\\n * { scrollbar-width: thin; scrollbar-color: var(--border-color) var(--background-primary); }\\n\\n .ip-info-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(230px, 1fr)); gap: 24px; }\\n .ip-info-section { background-color: var(--background-tertiary); border-radius: var(--border-radius); padding: 16px; border: 1px solid var(--border-color); display: flex; flex-direction: column; gap: 20px; }\\n .ip-info-header { display: flex; align-items: center; gap: 10px; border-bottom: 1px solid var(--border-color); padding-bottom: 10px; }\\n .ip-info-header svg { width: 20px; height: 20px; stroke: var(--accent-secondary); }\\n .ip-info-header h3 { font-family: var(--serif); font-size: 18px; font-weight: 400; color: var(--accent-secondary); margin: 0; }\\n .ip-info-content { display: flex; flex-direction: column; gap: 10px; }\\n .ip-info-item { display: flex; flex-direction: column; gap: 2px; }\\n .ip-info-item .label { font-size: 11px; color: var(--text-secondary); text-transform: uppercase; letter-spacing: 0.5px; }\\n .ip-info-item .value { font-size: 14px; color: var(--text-primary); word-break: break-all; line-height: 1.4; }\\n\\n .badge { display: inline-flex; align-items: center; justify-content: center; padding: 3px 8px; border-radius: 12px; font-size: 11px; font-weight: 500; text-transform: uppercase; letter-spacing: 0.5px; }\\n .badge-yes { background-color: rgba(112, 181, 112, 0.15); color: var(--status-success); border: 1px solid rgba(112, 181, 112, 0.3); }\\n .badge-no { background-color: rgba(224, 93, 68, 0.15); color: var(--status-error); border: 1px solid rgba(224, 93, 68, 0.3); }\\n .badge-neutral { background-color: rgba(79, 144, 196, 0.15); color: var(--status-info); border: 1px solid rgba(79, 144, 196, 0.3); }\\n .badge-warning { background-color: rgba(224, 188, 68, 0.15); color: var(--status-warning); border: 1px solid rgba(224, 188, 68, 0.3); }\\n\\n .skeleton { display: block; background: linear-gradient(90deg, var(--background-tertiary) 25%, var(--background-secondary) 50%, var(--background-tertiary) 75%); background-size: 200% 100%; animation: loading 1.5s infinite; border-radius: 4px; height: 16px; }\\n @keyframes loading { 0% { background-position: 200% 0; } 100% { background-position: -200% 0; } }\\n .country-flag { display: inline-block; width: 18px; height: auto; max-height: 14px; margin-right: 6px; vertical-align: middle; border-radius: 2px; }\\n\\n @media (max-width: 768px) {\\n body { padding: 20px; }\\n .container { padding: 0 14px; width: min(100%, 768px); }\\n .ip-info-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(170px, 1fr)); gap: 18px; }\\n .header h1 { font-size: 1.8rem; }\\n .header p { font-size: 0.7rem }\\n .ip-info-section { padding: 14px; gap: 18px; }\\n .ip-info-header h3 { font-size: 16px; }\\n .ip-info-header { gap: 8px; }\\n .ip-info-content { gap: 8px; }\\n .ip-info-item .label { font-size: 11px; }\\n .ip-info-item .value { font-size: 13px; }\\n .config-card { padding: 16px; }\\n .config-title { font-size: 18px; }\\n .config-title .refresh-btn { font-size: 11px; }\\n .config-content pre { font-size: 12px; }\\n .client-buttons { grid-template-columns: repeat(auto-fill, minmax(260px, 1fr)); }\\n .button { font-size: 12px; }\\n .copy-buttons { font-size: 11px; }\\n }\\n\\n @media (max-width: 480px) {\\n body { padding: 16px; }\\n .container { padding: 0 12px; width: min(100%, 390px); }\\n .header h1 { font-size: 20px; }\\n .header p { font-size: 8px; }\\n .ip-info-section { padding: 14px; gap: 16px; }\\n .ip-info-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px; }\\n .ip-info-header h3 { font-size: 14px; }\\n .ip-info-header { gap: 6px; }\\n .ip-info-content { gap: 6px; }\\n .ip-info-header svg { width: 18px; height: 18px; }\\n .ip-info-item .label { font-size: 9px; }\\n .ip-info-item .value { font-size: 11px; }\\n .badge { padding: 2px 6px; font-size: 10px; border-radius: 10px; }\\n .config-card { padding: 10px; }\\n .config-title { font-size: 16px; }\\n .config-title .refresh-btn { font-size: 10px; }\\n .config-content { padding: 12px; }\\n .config-content pre { font-size: 10px; }\\n .client-buttons { grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); }\\n .button { padding: 4px 8px; font-size: 11px; }\\n .copy-buttons { font-size: 10px; }\\n .footer { font-size: 10px; }\\n }\\n\\n @media (max-width: 359px) {\\n body { padding: 12px; font-size: 14px; }\\n .container { max-width: 100%; padding: 8px; }\\n .header h1 { font-size: 16px; }\\n .header p { font-size: 6px; }\\n .ip-info-section { padding: 12px; gap: 12px; }\\n .ip-info-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; }\\n .ip-info-header h3 { font-size: 13px; }\\n .ip-info-header { gap: 4px; }\\n .ip-info-content { gap: 4px; }\\n .ip-info-header svg { width: 16px; height: 16px; }\\n .ip-info-item .label { font-size: 8px; }\\n .ip-info-item .value { font-size: 10px; }\\n .badge { padding: 1px 4px; font-size: 9px; border-radius: 8px; }\\n .config-card { padding: 8px; }\\n .config-title { font-size: 13px; }\\n .config-title .refresh-btn { font-size: 9px; }\\n .config-content { padding: 8px; }\\n .config-content pre { font-size: 8px; }\\n .client-buttons { grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); }\\n .button { padding: 3px 6px; font-size: 10px; }\\n .copy-buttons { font-size: 9px; }\\n .footer { font-size: 8px; }\\n }\\n\\n @media (min-width: 360px) { .container { max-width: 95%; } }\\n @media (min-width: 480px) { .container { max-width: 90%; } }\\n @media (min-width: 640px) { .container { max-width: 600px; } }\\n @media (min-width: 768px) { .container { max-width: 720px; } }\\n @media (min-width: 1024px) { .container { max-width: 800px; } }\\n </style>\\n</head>\\n<body data-proxy-ip=\\\"{{PROXY_IP}}\\\">\\n <div class=\\\"container\\\">\\n <div class=\\\"header\\\">\\n <h1>VLESS Proxy Configuration</h1>\\n <p>Copy the configuration or import directly into your client</p>\\n </div>\\n\\n <div class=\\\"config-card\\\">\\n <div class=\\\"config-title\\\">\\n <span>Network Information</span>\\n <button id=\\\"refresh-ip-info\\\" class=\\\"refresh-btn\\\" aria-label=\\\"Refresh IP information\\\">\\n <svg class=\\\"refresh-icon\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\">\\n <path d=\\\"M21.5 2v6h-6M2.5 22v-6h6M2 11.5a10 10 0 0 1 18.8-4.3M22 12.5a10 10 0 0 1-18.8 4.2\\\" />\\n </svg>\\n Refresh\\n </button>\\n </div>\\n\\n <div class=\\\"ip-info-grid\\\">\\n <div class=\\\"ip-info-section\\\">\\n <div class=\\\"ip-info-header\\\">\\n <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\">\\n <path d=\\\"M15.5 2H8.6c-.4 0-.8.2-1.1.5-.3.3-.5.7-.5 1.1v16.8c0 .4.2.8.5 1.1.3.3.7.5 1.1.5h6.9c.4 0 .8-.2 1.1-.5.3-.3.5-.7.5-1.1V3.6c0-.4-.2-.8-.5-1.1-.3-.3-.7-.5-1.1-.5z\\\"/>\\n <circle cx=\\\"12\\\" cy=\\\"18\\\" r=\\\"1\\\"/>\\n </svg>\\n <h3>Proxy Server</h3>\\n </div>\\n <div class=\\\"ip-info-content\\\">\\n <div class=\\\"ip-info-item\\\">\\n <span class=\\\"label\\\">Proxy Host</span>\\n <span class=\\\"value\\\" id=\\\"proxy-host\\\"><span class=\\\"skeleton\\\" style=\\\"width: 150px;\\\"></span></span>\\n </div>\\n <div class=\\\"ip-info-item\\\">\\n <span class=\\\"label\\\">IP Address</span>\\n <span class=\\\"value\\\" id=\\\"proxy-ip\\\"><span class=\\\"skeleton\\\" style=\\\"width: 120px;\\\"></span></span>\\n </div>\\n <div class=\\\"ip-info-item\\\">\\n <span class=\\\"label\\\">Location</span>\\n <span class=\\\"value\\\" id=\\\"proxy-location\\\"><span class=\\\"skeleton\\\" style=\\\"width: 100px;\\\"></span></span>\\n </div>\\n <div class=\\\"ip-info-item\\\">\\n <span class=\\\"label\\\">ISP Provider</span>\\n <span class=\\\"value\\\" id=\\\"proxy-isp\\\"><span class=\\\"skeleton\\\" style=\\\"width: 140px;\\\"></span></span>\\n </div>\\n </div>\\n </div>\\n\\n <div class=\\\"ip-info-section\\\">\\n <div class=\\\"ip-info-header\\\">\\n <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\">\\n <path d=\\\"M20 16V7a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v9m16 0H4m16 0 1.28 2.55a1 1 0 0 1-.9 1.45H3.62a1 1 0 0 1-.9-1.45L4 16\\\"/>\\n </svg>\\n <h3>Your Connection</h3>\\n </div>\\n <div class=\\\"ip-info-content\\\">\\n <div class=\\\"ip-info-item\\\">\\n <span class=\\\"label\\\">Your IP</span>\\n <span class=\\\"value\\\" id=\\\"client-ip\\\"><span class=\\\"skeleton\\\" style=\\\"width: 110px;\\\"></span></span>\\n </div>\\n <div class=\\\"ip-info-item\\\">\\n <span class=\\\"label\\\">Location</span>\\n <span class=\\\"value\\\" id=\\\"client-location\\\"><span class=\\\"skeleton\\\" style=\\\"width: 90px;\\\"></span></span>\\n </div>\\n <div class=\\\"ip-info-item\\\">\\n <span class=\\\"label\\\">ISP Provider</span>\\n <span class=\\\"value\\\" id=\\\"client-isp\\\"><span class=\\\"skeleton\\\" style=\\\"width: 130px;\\\"></span></span>\\n </div>\\n <div class=\\\"ip-info-item\\\">\\n <span class=\\\"label\\\">Risk Score</span>\\n <span class=\\\"value\\\" id=\\\"client-proxy\\\">\\n <span class=\\\"skeleton\\\" style=\\\"width: 100px;\\\"></span>\\n </span>\\n </div>\\n </div>\\n </div>\\n </div>\\n </div>\\n\\n <div class=\\\"config-card\\\">\\n <div class=\\\"config-title\\\">\\n <span>Xray Core Clients</span>\\n <button class=\\\"button copy-buttons\\\" onclick=\\\"copyToClipboard(this, '{{DREAM_CONFIG}}')\\\">\\n <svg class=\\\"copy-icon\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"12\\\" height=\\\"12\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\">\\n <rect x=\\\"9\\\" y=\\\"9\\\" width=\\\"13\\\" height=\\\"13\\\" rx=\\\"2\\\" ry=\\\"2\\\"></rect>\\n <path d=\\\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\\\"></path>\\n </svg>\\n Copy\\n </button>\\n </div>\\n <div class=\\\"config-content\\\">\\n <pre id=\\\"xray-config\\\">{{DREAM_CONFIG}}</pre>\\n </div>\\n <div class=\\\"client-buttons\\\">\\n <a href=\\\"hiddify://install-config?url={{FREEDOM_CONFIG_ENCODED}}\\\" class=\\\"button client-btn\\\">\\n <span class=\\\"client-icon\\\"><svg viewBox=\\\"0 0 24 24\\\"><path d=\\\"M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5\\\" /></svg></span>\\n <span class=\\\"button-text\\\">Import to Hiddify</span>\\n </a>\\n <a href=\\\"v2rayng://install-config?url={{DREAM_CONFIG_ENCODED}}\\\" class=\\\"button client-btn\\\">\\n <span class=\\\"client-icon\\\"><svg viewBox=\\\"0 0 24 24\\\"><path d=\\\"M12 2L4 5v6c0 5.5 3.5 10.7 8 12.3 4.5-1.6 8-6.8 8-12.3V5l-8-3z\\\" /></svg></span>\\n <span class=\\\"button-text\\\">Import to V2rayNG</span>\\n </a>\\n </div>\\n </div>\\n\\n <div class=\\\"config-card\\\">\\n <div class=\\\"config-title\\\">\\n <span>Sing-Box Core Clients</span>\\n <button class=\\\"button copy-buttons\\\" onclick=\\\"copyToClipboard(this, '{{FREEDOM_CONFIG}}')\\\">\\n <svg class=\\\"copy-icon\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"12\\\" height=\\\"12\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\">\\n <rect x=\\\"9\\\" y=\\\"9\\\" width=\\\"13\\\" height=\\\"13\\\" rx=\\\"2\\\" ry=\\\"2\\\"></rect>\\n <path d=\\\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\\\"></path>\\n </svg>\\n Copy\\n </button>\\n </div>\\n <div class=\\\"config-content\\\">\\n <pre id=\\\"singbox-config\\\">{{FREEDOM_CONFIG}}</pre>\\n </div>\\n <div class=\\\"client-buttons\\\">\\n <a href=\\\"{{CLASH_META_URL}}\\\" class=\\\"button client-btn\\\">\\n <span class=\\\"client-icon\\\"><svg viewBox=\\\"0 0 24 24\\\"><path d=\\\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.95-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z\\\" /></svg></span>\\n <span class=\\\"button-text\\\">Import to Clash Meta</span>\\n </a>\\n <a href=\\\"{{NEKOBOX_URL}}\\\" class=\\\"button client-btn\\\">\\n <span class=\\\"client-icon\\\"><svg viewBox=\\\"0 0 24 24\\\"><path d=\\\"M20,8h-3V6c0-1.1-0.9-2-2-2H9C7.9,4,7,4.9,7,6v2H4C2.9,8,2,8.9,2,10v9c0,1.1,0.9,2,2,2h16c1.1,0,2-0.9,2-2v-9 C22,8.9,21.1,8,20,8z M9,6h6v2H9V6z M20,19H4v-2h16V19z M20,15H4v-5h3v1c0,0.55,0.45,1,1,1h1.5c0.28,0,0.5-0.22,0.5-0.5v-0.5h4v0.5 c0,0.28,0.22,0.5,0.5,0.5H16c0.55,0,1-0.45,1-1v-1h3V15z\\\" /><circle cx=\\\"8.5\\\" cy=\\\"13.5\\\" r=\\\"1\\\" /><circle cx=\\\"15.5\\\" cy=\\\"13.5\\\" r=\\\"1\\\" /><path d=\\\"M12,15.5c-0.55,0-1-0.45-1-1h2C13,15.05,12.55,15.5,12,15.5z\\\" /></svg></span>\\n <span class=\\\"button-text\\\">Import to NekoBox</span>\\n </a>\\n </div>\\n </div>\\n\\n <div class=\\\"footer\\\">\\n <p>© <span id=\\\"current-year\\\">{{YEAR}}</span> REvil - All Rights Reserved</p>\\n <p>Secure. Private. Fast.</p>\\n </div>\\n </div>\\n\\n <script>\\n function copyToClipboard(button, text) {\\n const originalHTML = button.innerHTML;\\n\\n navigator.clipboard.writeText(text).then(() => {\\n button.innerHTML = `\\n <svg class=\\\"copy-icon\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"12\\\" height=\\\"12\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\">\\n <rect x=\\\"9\\\" y=\\\"9\\\" width=\\\"13\\\" height=\\\"13\\\" rx=\\\"2\\\" ry=\\\"2\\\"></rect>\\n <path d=\\\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\\\"></path>\\n </svg>\\n Copied!\\n `;\\n button.classList.add(\\\"copied\\\");\\n button.disabled = true;\\n\\n setTimeout(() => {\\n button.innerHTML = originalHTML;\\n button.classList.remove(\\\"copied\\\");\\n button.disabled = false;\\n }, 1200);\\n }).catch(err => {\\n console.error(\\\"Failed to copy text: \\\", err);\\n const originalHTMLError = button.innerHTML;\\n\\n button.innerHTML = `\\n <svg class=\\\"copy-icon\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"12\\\" height=\\\"12\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\">\\n <rect x=\\\"9\\\" y=\\\"9\\\" width=\\\"13\\\" height=\\\"13\\\" rx=\\\"2\\\" ry=\\\"2\\\"></rect>\\n <path d=\\\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\\\"></path>\\n </svg>\\n Error\\n `;\\n button.classList.add(\\\"error\\\");\\n button.disabled = true;\\n\\n setTimeout(() => {\\n button.innerHTML = originalHTMLError;\\n button.classList.remove(\\\"error\\\");\\n button.disabled = false;\\n }, 1500);\\n });\\n }\\n\\n async function fetchClientPublicIP() {\\n try {\\n const response = await fetch('/api/ip');\\n if (!response.ok) {\\n throw new Error(`HTTP error! status: ${response.status}`);\\n }\\n const data = await response.json();\\n return data.ip;\\n } catch (error) {\\n console.error('Error fetching client IP from worker:', error);\\n return null;\\n }\\n }\\n\\n async function fetchScamalyticsClientInfo(clientIp) {\\n if (!clientIp) return null;\\n try {\\n const workerLookupUrl = `/scamalytics-lookup?ip=${encodeURIComponent(clientIp)}`;\\n const response = await fetch(workerLookupUrl);\\n\\n if (!response.ok) {\\n let errorDetail = `Worker request failed! status: ${response.status}`;\\n try {\\n const errorData = await response.json();\\n if (errorData && errorData.error) {\\n errorDetail = errorData.error;\\n if(errorData.details) errorDetail += ` Details: ${errorData.details}`;\\n } else if (errorData && errorData.scamalytics && errorData.scamalytics.error) {\\n errorDetail = errorData.scamalytics.error;\\n } else if (response.statusText) {\\n errorDetail += ` - ${response.statusText}`;\\n }\\n } catch (e) {\\n errorDetail += ` - ${await response.text()}`;\\n }\\n throw new Error(errorDetail);\\n }\\n const data = await response.json();\\n if (data.scamalytics && data.scamalytics.status === 'error') {\\n throw new Error(data.scamalytics.error || 'Scamalytics API error via Worker');\\n }\\n if (data.error && !data.scamalytics) {\\n throw new Error(data.error);\\n }\\n return data;\\n } catch (error) {\\n console.error('Error fetching from Scamalytics via Worker:', error);\\n return null;\\n }\\n }\\n\\n function updateScamalyticsClientDisplay(data) {\\n const prefix = 'client';\\n if (!data || !data.scamalytics || data.scamalytics.status !== 'ok') {\\n // Don't show error here, as geo data might come from the other source.\\n // Only update the risk score part.\\n const proxyElement = document.getElementById(`${prefix}-proxy`);\\n if(proxyElement) proxyElement.innerHTML = `<span class=\\\"badge badge-neutral\\\">N/A</span>`;\\n return;\\n }\\n\\n const sa = data.scamalytics;\\n const proxyElement = document.getElementById(`${prefix}-proxy`);\\n\\n if (proxyElement) {\\n const score = sa.scamalytics_score;\\n const risk = sa.scamalytics_risk;\\n let riskText = \\\"Unknown\\\";\\n let badgeClass = \\\"badge-neutral\\\";\\n\\n if (risk !== undefined && score !== undefined && risk !== null && score !== null) {\\n riskText = `${score} - ${risk.charAt(0).toUpperCase() + risk.slice(1)}`;\\n switch (risk.toLowerCase()) {\\n case \\\"low\\\": badgeClass = \\\"badge-yes\\\"; break;\\n case \\\"medium\\\": badgeClass = \\\"badge-warning\\\"; break;\\n case \\\"high\\\": badgeClass = \\\"badge-no\\\"; break;\\n case \\\"very high\\\": badgeClass = \\\"badge-no\\\"; break;\\n default:\\n badgeClass = \\\"badge-neutral\\\";\\n riskText = `Score ${score} - ${risk || 'Status Unknown'}`;\\n break;\\n }\\n } else if (score !== undefined && score !== null) {\\n riskText = `Score ${score} - N/A`;\\n } else if (risk) {\\n riskText = risk.charAt(0).toUpperCase() + risk.slice(1);\\n switch (risk.toLowerCase()) {\\n case \\\"low\\\": badgeClass = \\\"badge-yes\\\"; break;\\n case \\\"medium\\\": badgeClass = \\\"badge-warning\\\"; break;\\n case \\\"high\\\": case \\\"very high\\\": badgeClass = \\\"badge-no\\\"; break;\\n default: badgeClass = \\\"badge-neutral\\\"; riskText=\\\"Status Unknown\\\"; break;\\n }\\n }\\n proxyElement.innerHTML = `<span class=\\\"badge ${badgeClass}\\\">${riskText}</span>`;\\n }\\n }\\n\\n function updateProxyDisplay(geo, prefix, originalHost) {\\n const hostElement = document.getElementById(`${prefix}-host`);\\n if (hostElement) {\\n hostElement.textContent = originalHost || \\\"N/A\\\";\\n }\\n\\n const ipElement = document.getElementById(`${prefix}-ip`);\\n const locationElement = document.getElementById(`${prefix}-location`);\\n const ispElement = document.getElementById(`${prefix}-isp`);\\n\\n if (!geo) {\\n if (ipElement) ipElement.textContent = \\\"N/A\\\";\\n if (locationElement) locationElement.innerHTML = \\\"N/A\\\";\\n if (ispElement) ispElement.textContent = \\\"N/A\\\";\\n return;\\n }\\n\\n if (ipElement) ipElement.textContent = geo.ip || \\\"N/A\\\";\\n\\n if (locationElement) {\\n const city = geo.city || '';\\n const countryName = geo.country_name || '';\\n const countryCode = geo.country_code ? geo.country_code.toLowerCase() : '';\\n let flagElementHtml = '';\\n\\n if (countryCode) {\\n flagElementHtml = `<img src=\\\"https://flagcdn.com/w20/${countryCode}.png\\\" srcset=\\\"https://flagcdn.com/w40/${countryCode}.png 2x\\\" alt=\\\"${geo.country_code || 'flag'}\\\" class=\\\"country-flag\\\"> `;}\\n\\n let textPart = '';\\n if (city && countryName) textPart = `${city}, ${countryName}`;\\n else if (countryName) textPart = countryName;\\n else if (city) textPart = city;\\n\\n let locationText = 'N/A';\\n if (flagElementHtml.trim() || textPart.trim()) {\\n locationText = `${flagElementHtml}${textPart}`.trim();\\n }\\n locationElement.innerHTML = locationText || \\\"N/A\\\";\\n }\\n if (ispElement) {\\n ispElement.textContent = geo.isp || 'N/A';\\n }\\n }\\n\\n async function fetchGeoIpInfo(ip) {\\n try {\\n const response = await fetch(`/api/geoip/${ip}`);\\n if (!response.ok) {\\n const errorText = await response.text();\\n throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\\n }\\n return await response.json();\\n } catch (error) {\\n console.error('GeoIP API Error (via worker):', error);\\n return null;\\n }\\n }\\n\\n function showError(prefix, message = \\\"Could not load data\\\", originalHostForProxy = null) {\\n const errorMessage = \\\"N/A\\\";\\n if (prefix === 'proxy') {\\n const hostElement = document.getElementById('proxy-host');\\n const ipElement = document.getElementById('proxy-ip');\\n const locationElement = document.getElementById('proxy-location');\\n const ispElement = document.getElementById('proxy-isp');\\n if (hostElement) hostElement.textContent = originalHostForProxy || errorMessage;\\n if (ipElement) ipElement.textContent = errorMessage;\\n if (locationElement) locationElement.innerHTML = errorMessage;\\n if (ispElement) ispElement.textContent = errorMessage;\\n } else if (prefix === 'client') {\\n const ipElement = document.getElementById('client-ip');\\n const locationElement = document.getElementById('client-location');\\n const ispElement = document.getElementById('client-isp');\\n const riskScoreElement = document.getElementById('client-proxy');\\n if (ipElement) ipElement.textContent = errorMessage;\\n if (locationElement) locationElement.innerHTML = errorMessage;\\n if (ispElement) ispElement.textContent = errorMessage;\\n if (riskScoreElement) riskScoreElement.innerHTML = `<span class=\\\"badge badge-neutral\\\">N/A</span>`;\\n }\\n console.warn(`${prefix} data loading failed: ${message}`);\\n }\\n\\n async function loadNetworkInfo() {\\n // --- Load Client Info ---\\n const clientIp = await fetchClientPublicIP();\\n if (clientIp) {\\n document.getElementById('client-ip').textContent = clientIp;\\n\\n const clientGeoData = await fetchGeoIpInfo(clientIp);\\n if(clientGeoData) {\\n const clientLocationEl = document.getElementById('client-location');\\n const clientIspEl = document.getElementById('client-isp');\\n\\n const city = clientGeoData.city || '';\\n const countryName = clientGeoData.country_name || '';\\n const countryCode = clientGeoData.country_code ? clientGeoData.country_code.toLowerCase() : '';\\n let flagHtml = countryCode ? `<img src=\\\"https://flagcdn.com/w20/${countryCode}.png\\\" srcset=\\\"https://flagcdn.com/w40/${countryCode}.png 2x\\\" alt=\\\"${clientGeoData.country_code}\\\" class=\\\"country-flag\\\"> ` : '';\\n\\n let locationText = 'N/A';\\n if (city && countryName) locationText = `${city}, ${countryName}`;\\n else if (countryName) locationText = countryName;\\n else if (city) locationText = city;\\n\\n clientLocationEl.innerHTML = `${flagHtml}${locationText}`.trim();\\n clientIspEl.textContent = clientGeoData.isp || 'N/A';\\n } else {\\n showError('client', 'Could not load client geo data.');\\n }\\n\\n const scamalyticsData = await fetchScamalyticsClientInfo(clientIp);\\n updateScamalyticsClientDisplay(scamalyticsData);\\n\\n } else {\\n showError('client', 'Could not determine your IP address.');\\n }\\n\\n // --- Load Proxy Server Info ---\\n const proxyDomainOrIp = document.body.getAttribute('data-proxy-ip');\\n let resolvedProxyIp = proxyDomainOrIp;\\n const proxyHostVal = (proxyDomainOrIp && proxyDomainOrIp.toLowerCase() !== \\\"null\\\" && proxyDomainOrIp.trim() !== \\\"\\\") ? proxyDomainOrIp : \\\"N/A\\\";\\n\\n if (proxyHostVal !== \\\"N/A\\\") {\\n if (!/^\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}$/.test(proxyDomainOrIp)) {\\n try {\\n const dnsRes = await fetch(`https://dns.google/resolve?name=${encodeURIComponent(proxyDomainOrIp)}&type=A`);\\n if (dnsRes.ok) {\\n const dnsData = await dnsRes.json();\\n if (dnsData.Answer && dnsData.Answer.length > 0) {\\n const ipAnswer = dnsData.Answer.find(a => a.type === 1);\\n if (ipAnswer) resolvedProxyIp = ipAnswer.data;\\n }\\n }\\n } catch (e) {\\n console.error('DNS resolution for proxy failed:', e);\\n }\\n }\\n\\n const proxyGeoData = await fetchGeoIpInfo(resolvedProxyIp);\\n if (proxyGeoData) {\\n updateProxyDisplay(proxyGeoData, 'proxy', proxyHostVal);\\n } else {\\n showError('proxy', `Could not load proxy geo data for ${resolvedProxyIp}.`, proxyHostVal);\\n }\\n } else {\\n showError('proxy', 'Proxy Host not available', \\\"N/A\\\");\\n }\\n }\\n\\n // Refresh button functionality\\n document.getElementById('refresh-ip-info')?.addEventListener('click', function() {\\n const button = this;\\n const icon = button.querySelector('.refresh-icon');\\n button.disabled = true;\\n if (icon) icon.style.animation = 'spin 1s linear infinite';\\n\\n const resetToSkeleton = (prefix) => {\\n const elementsToReset = ['ip', 'location', 'isp'];\\n if (prefix === 'proxy') elementsToReset.push('host');\\n if (prefix === 'client') elementsToReset.push('proxy');\\n\\n elementsToReset.forEach(elemKey => {\\n const element = document.getElementById(`${prefix}-${elemKey}`);\\n if (element) {\\n let skeletonWidth = \\\"100px\\\";\\n if (elemKey === 'isp') skeletonWidth = \\\"130px\\\";\\n else if (elemKey === 'location') skeletonWidth = \\\"110px\\\";\\n else if (elemKey === 'ip') skeletonWidth = \\\"120px\\\";\\n else if (elemKey === 'host' && prefix === 'proxy') skeletonWidth = \\\"150px\\\";\\n else if (elemKey === 'proxy' && prefix === 'client') skeletonWidth = \\\"100px\\\";\\n element.innerHTML = `<span class=\\\"skeleton\\\" style=\\\"width: ${skeletonWidth};\\\"></span>`;\\n }\\n });\\n };\\n\\n resetToSkeleton('proxy');\\n resetToSkeleton('client');\\n loadNetworkInfo().finally(() => setTimeout(() => {\\n button.disabled = false; if (icon) icon.style.animation = '';\\n }, 1000));\\n });\\n\\n const style = document.createElement('style');\\n style.textContent = `@keyframes spin { from { transform: rotate(0deg); } to { transform: rotate(360deg); } }`;\\n document.head.appendChild(style);\\n\\n document.addEventListener('DOMContentLoaded', () => {\\n console.log('Page loaded, initializing network info...');\\n loadNetworkInfo();\\n });\\n</script>\",\n \"description\": \"The `HTML_TEMPLATE` includes a very large block of inline JavaScript within a `<script>` tag, which is over 300 lines long. Embedding complex logic and multiple functions directly in a string template makes it significantly harder to maintain, debug, test, and apply code quality practices (like linting or modularization) using standard JavaScript tooling. Consider externalizing this script or using a proper templating engine that allows for separate JavaScript files.\",\n \"lineNumber\": 419,\n \"severity\": \"medium\"\n },\n {\n \"category\": \"Readability\",\n \"codeSnippet\": \"button.innerHTML = `\\n <svg class=\\\"copy-icon\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"12\\\" height=\\\"12\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\">\\n <rect x=\\\"9\\\" y=\\\"9\\\" width=\\\"13\\\" height=\\\"13\\\" rx=\\\"2\\\" ry=\\\"2\\\"></rect>\\n <path d=\\\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\\\"></path>\\n </svg>\\n Copied!\\n `;\",\n \"description\": \"The `copyToClipboard` function duplicates the full SVG path definition for the copy icon when updating the button's inner HTML. This creates redundant code and makes future updates to the icon more difficult. The SVG HTML could be extracted into a constant or a helper function to avoid repetition.\",\n \"lineNumber\": 778,\n \"severity\": \"low\"\n },\n {\n \"category\": \"Readability\",\n \"codeSnippet\": \"if (proxyElement) {\\n const score = sa.scamalytics_score;\\n const risk = sa.scamalytics_risk;\\n let riskText = \\\"Unknown\\\";\\n let badgeClass = \\\"badge-neutral\\\";\\n\\n if (risk !== undefined && score !== undefined && risk !== null && score !== null) {\\n riskText = `${score} - ${risk.charAt(0).toUpperCase() + risk.slice(1)}`;\\n switch (risk.toLowerCase()) {\\n case \\\"low\\\": badgeClass = \\\"badge-yes\\\"; break;\\n case \\\"medium\\\": badgeClass = \\\"badge-warning\\\"; break;\\n case \\\"high\\\": badgeClass = \\\"badge-no\\\"; break;\\n case \\\"very high\\\": badgeClass = \\\"badge-no\\\"; break;\\n default:\\n badgeClass = \\\"badge-neutral\\\";\\n riskText = `Score ${score} - ${risk || 'Status Unknown'}`;\\n break;\\n }\\n } else if (score !== undefined && score !== null) {\\n riskText = `Score ${score} - N/A`;\\n } else if (risk) {\\n riskText = risk.charAt(0).toUpperCase() + risk.slice(1);\\n switch (risk.toLowerCase()) {\\n case \\\"low\\\": badgeClass = \\\"badge-yes\\\"; break;\\n case \\\"medium\\\": badgeClass = \\\"badge-warning\\\"; break;\\n case \\\"high\\\": case \\\"very high\\\": badgeClass = \\\"badge-no\\\"; break;\\n default: badgeClass = \\\"badge-neutral\\\"; riskText=\\\"Status Unknown\\\"; break;\\n }\\n }\\n proxyElement.innerHTML = `<span class=\\\"badge ${badgeClass}\\\">${riskText}</span>`;\\n }\",\n \"description\": \"The logic within `updateScamalyticsClientDisplay` to determine the `riskText` and `badgeClass` based on `scamalytics_score` and `scamalytics_risk` is somewhat convoluted with multiple `if`/`else if` conditions and nested `switch` statements. This complexity makes it harder to read and test. Consider refactoring this into a cleaner, dedicated utility function that returns the necessary display properties for the badge.\",\n \"lineNumber\": 863,\n \"severity\": \"medium\"\n },\n {\n \"category\": \"Avoid magic numbers\",\n \"codeSnippet\": \"flagElementHtml = `<img src=\\\"https://flagcdn.com/w20/${countryCode}.png\\\" srcset=\\\"https://flagcdn.com/w40/${countryCode}.png 2x\\\" alt=\\\"${geo.country_code || 'flag'}\\\" class=\\\"country-flag\\\"> `;\",\n \"description\": \"The base URL for fetching country flag images (`https://flagcdn.com/w20/`) is hardcoded directly within the `updateProxyDisplay` function. This should be defined as a named constant (e.g., `FLAG_CDN_BASE_URL`) to improve maintainability if the CDN source or path structure changes.\",\n \"lineNumber\": 914,\n \"severity\": \"low\"\n },\n {\n \"category\": \"Function size\",\n \"codeSnippet\": \"function showError(prefix, message = \\\"Could not load data\\\", originalHostForProxy = null) {\\n const errorMessage = \\\"N/A\\\";\\n if (prefix === 'proxy') {\\n const hostElement = document.getElementById('proxy-host');\\n const ipElement = document.getElementById('proxy-ip');\\n const locationElement = document.getElementById('proxy-location');\\n const ispElement = document.getElementById('proxy-isp');\\n if (hostElement) hostElement.textContent = originalHostForProxy || errorMessage;\\n if (ipElement) ipElement.textContent = errorMessage;\\n if (locationElement) locationElement.innerHTML = errorMessage;\\n if (ispElement) ispElement.textContent = errorMessage;\\n } else if (prefix === 'client') {\\n const ipElement = document.getElementById('client-ip');\\n const locationElement = document.getElementById('client-location');\\n const ispElement = document.getElementById('client-isp');\\n const riskScoreElement = document.getElementById('client-proxy');\\n if (ipElement) ipElement.textContent = errorMessage;\\n if (locationElement) locationElement.innerHTML = errorMessage;\\n if (ispElement) ispElement.textContent = errorMessage;\\n if (riskScoreElement) riskScoreElement.innerHTML = `<span class=\\\"badge badge-neutral\\\">N/A</span>`;\\n }\\n console.warn(`${prefix} data loading failed: ${message}`);\\n }\",\n \"description\": \"The `showError` function contains repetitive code for updating DOM elements based on the `prefix` ('proxy' or 'client'). The `if/else if` structure with repeated `document.getElementById` calls and similar assignments could be refactored to reduce duplication, perhaps by mapping element IDs to common update logic or using a more generalized element selection strategy.\",\n \"lineNumber\": 954,\n \"severity\": \"medium\"\n },\n {\n \"category\": \"Function size\",\n \"codeSnippet\": \"async function loadNetworkInfo() {\\n // --- Load Client Info ---\\n const clientIp = await fetchClientPublicIP();\\n if (clientIp) {\\n document.getElementById('client-ip').textContent = clientIp;\\n\\n const clientGeoData = await fetchGeoIpInfo(clientIp);\\n if(clientGeoData) {\\n const clientLocationEl = document.getElementById('client-location');\\n const clientIspEl = document.getElementById('client-isp');\\n\\n const city = clientGeoData.city || '';\\n const countryName = clientGeoData.country_name || '';\\n const countryCode = clientGeoData.country_code ? clientGeoData.country_code.toLowerCase() : '';\\n let flagHtml = countryCode ? `<img src=\\\"https://flagcdn.com/w20/${countryCode}.png\\\" srcset=\\\"https://flagcdn.com/w40/${countryCode}.png 2x\\\" alt=\\\"${clientGeoData.country_code}\\\" class=\\\"country-flag\\\"> ` : '';\\n\\n let locationText = 'N/A';\\n if (city && countryName) locationText = `${city}, ${countryName}`;\\n else if (countryName) locationText = countryName;\\n else if (city) locationText = city;\\n\\n clientLocationEl.innerHTML = `${flagHtml}${locationText}`.trim();\\n clientIspEl.textContent = clientGeoData.isp || 'N/A';\\n } else {\\n showError('client', 'Could not load client geo data.');\\n }\\n\\n const scamalyticsData = await fetchScamalyticsClientInfo(clientIp);\\n updateScamalyticsClientDisplay(scamalyticsData);\\n\\n } else {\\n showError('client', 'Could not determine your IP address.');\\n }\\n\\n // --- Load Proxy Server Info ---\\n const proxyDomainOrIp = document.body.getAttribute('data-proxy-ip');\\n let resolvedProxyIp = proxyDomainOrIp;\\n const proxyHostVal = (proxyDomainOrIp && proxyDomainOrIp.toLowerCase() !== \\\"null\\\" && proxyDomainOrIp.trim() !== \\\"\\\") ? proxyDomainOrIp : \\\"N/A\\\";\\n\\n if (proxyHostVal !== \\\"N/A\\\") {\\n if (!/^\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}$/.test(proxyDomainOrIp)) {\\n try {\\n const dnsRes = await fetch(`https://dns.google/resolve?name=${encodeURIComponent(proxyDomainOrIp)}&type=A`);\\n if (dnsRes.ok) {\\n const dnsData = await dnsRes.json();\\n if (dnsData.Answer && dnsData.Answer.length > 0) {\\n const ipAnswer = dnsData.Answer.find(a => a.type === 1);\\n if (ipAnswer) resolvedProxyIp = ipAnswer.data;\\n }\\n }\\n } catch (e) {\\n console.error('DNS resolution for proxy failed:', e);\\n }\\n }\\n\\n const proxyGeoData = await fetchGeoIpInfo(resolvedProxyIp);\\n if (proxyGeoData) {\\n updateProxyDisplay(proxyGeoData, 'proxy', proxyHostVal);\\n } else {\\n showError('proxy', `Could not load proxy geo data for ${resolvedProxyIp}.`, proxyHostVal);\\n }\\n } else {\\n showError('proxy', 'Proxy Host not available', \\\"N/A\\\");\\n }\\n }\",\n \"description\": \"The `loadNetworkInfo` function is quite long (over 60 lines) and performs multiple distinct tasks: fetching client IP, fetching client GeoIP, fetching Scamalytics info, determining proxy IP, and fetching proxy GeoIP. Breaking this down into smaller, more specialized functions (e.g., `fetchAndDisplayClientInfo()`, `fetchAndDisplayProxyInfo()`) would improve modularity, readability, and testability.\",\n \"lineNumber\": 981,\n \"severity\": \"medium\"\n },\n {\n \"category\": \"Avoid magic numbers\",\n \"codeSnippet\": \"if (!/^\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}$/.test(proxyDomainOrIp)) {\",\n \"description\": \"The `loadNetworkInfo` function contains an inline regular expression `^\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}$` for validating IP addresses. Defining this regex as a named constant would improve readability and make its purpose clearer.\",\n \"lineNumber\": 1014,\n \"severity\": \"low\"\n },\n {\n \"category\": \"Avoid magic numbers\",\n \"codeSnippet\": \"const dnsRes = await fetch(`https://dns.google/resolve?name=${encodeURIComponent(proxyDomainOrIp)}&type=A`);\",\n \"description\": \"The `loadNetworkInfo` function hardcodes the URL for Google's DNS-over-HTTPS resolver (`https://dns.google/resolve`). This should be defined as a named constant (e.g., `GOOGLE_DNS_RESOLVER_URL`) for clarity and easier modification if the service or URL changes.\",\n \"lineNumber\": 1016,\n \"severity\": \"low\"\n },\n {\n \"category\": \"Avoid magic numbers\",\n \"codeSnippet\": \"if (icon) icon.style.animation = 'spin 1s linear infinite';\\n...\\nloadNetworkInfo().finally(() => setTimeout(() => {\\n button.disabled = false; if (icon) icon.style.animation = '';\\n }, 1000));\",\n \"description\": \"The animation duration (`1s`) in the `style.animation` property and the `setTimeout` delay (`1000`ms) for resetting the refresh button state are hardcoded. These \\\"magic numbers\\\" should be defined as named constants (e.g., `SPIN_ANIMATION_DURATION_SECONDS`, `RESET_BUTTON_DELAY_MS`) to improve readability and make adjustments easier.\",\n \"lineNumber\": 1056,\n \"severity\": \"low\"\n }\n ]\n}"
          }
        ],
        "role": "model"
      },
      "finishReason": "STOP",
      "index": 0
    }
  ],
  "modelVersion": "gemini-2.5-flash",
  "responseId": "X7qnaK3AI9uRjMcPv7fT6Q8",
  "sdkHttpResponse": {
    "headers": {
      "alt-svc": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000",
      "content-encoding": "gzip",
      "content-type": "application/json; charset=UTF-8",
      "date": "Fri, 22 Aug 2025 00:31:27 GMT",
      "server": "scaffolding on HTTPServer2",
      "server-timing": "gfet4t7; dur=136187",
      "transfer-encoding": "chunked",
      "vary": "Origin, X-Origin, Referer",
      "x-content-type-options": "nosniff",
      "x-frame-options": "SAMEORIGIN",
      "x-xss-protection": "0"
    }
  },
  "usageMetadata": {
    "candidatesTokenCount": 22063,
    "promptTokenCount": 19709,
    "promptTokensDetails": [{ "modality": "TEXT", "tokenCount": 19709 }],
    "thoughtsTokenCount": 9083,
    "totalTokenCount": 50855
  }
}
